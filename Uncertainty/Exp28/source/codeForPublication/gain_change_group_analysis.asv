%Group analysis code for the gain change experiment

clear all; close all;

%% Load data

path = uigetdir('Z:\Wilson Lab\Mel\Experiments\Uncertainty\Exp28\data');

folderContents = dir(path);

for content = 1:length(folderContents)
   if (contains(folderContents(content).name,'60D05') & ~contains(folderContents(content).name,'20210205'))
       data(content) = load([folderContents(content).folder,'\',folderContents(content).name,'\analysis\gain_change_data.mat']);
   end
end

%% Clean and combine data

%Remove empty rows
data = data(all(~cellfun(@isempty,struct2cell(data))));

for fly = 1:length(data)
   if data(fly).type_of_fly == 1
       type_1_data{fly} = data(fly).modelTable;
   else
       type_2_data{fly} = data(fly).modelTable;
   end
end

%Remove empty cells
type_1_data = type_1_data(~cellfun('isempty',type_1_data));
type_2_data = type_2_data(~cellfun('isempty',type_2_data));

%Combine the tables into one
for window = 1:6
    flyNumber = [];
    allType1Data{window} = array2table(zeros(0,5),'VariableNames', {'BarOffsetVariability','HeadingOffsetVariability','TotalMovement','BumpMagnitude','BumpWidth'});
    for fly = 1:length(type_1_data)
        flyNumber = [flyNumber,repelem(fly,length(type_1_data{1,fly}{1,window}.BumpMagnitude))];
        allType1Data{window} = [allType1Data{window};type_1_data{1,fly}{1,window}];
    end
    allType1Data{window} = addvars(allType1Data{window},flyNumber');
    allType1Data{window}.Properties.VariableNames{'Var6'} = 'Fly';
end

%For type 2 flies
for window = 1:6
    flyNumber = [];
    allType2Data{window} = array2table(zeros(0,5),'VariableNames', {'BarOffsetVariability','HeadingOffsetVariability','TotalMovement','BumpMagnitude','BumpWidth'});
    for fly = 1:length(type_2_data)
        flyNumber = [flyNumber,repelem(fly,length(type_2_data{1,fly}{1,window}.BumpMagnitude))];
        allType2Data{window} = [allType2Data{window};type_2_data{1,fly}{1,window}];
    end
    allType2Data{window} = addvars(allType2Data{window},flyNumber');
    allType2Data{window}.Properties.VariableNames{'Var6'} = 'Fly';
end

%% Compute model for bump magnitude for all the type 1 flies

%Fit mixed linear model using fly number as a random variable
for window = 1:6
    mdl_BM_type1{window} = fitlme(allType1Data{window},'BumpMagnitude~HeadingOffsetVariability+TotalMovement+(1|Fly)');
    %Model Rsquared
    Rsquared_BM_type1(window) = mdl_BM_type1{window}.Rsquared.Adjusted;
end

figure,
plot(Rsquared_BM_type1,'-o')
title('Bump magnitude');
ylabel('Rsquared');
xlabel('window #');

%show coefficients for max Rsquared model
[m I1] = max(Rsquared_BM_type1);
mdl_BM_type1{I1}

%% Repeat for bump width at half max

%Fit mixed linear model using fly number as a random variable
for window = 1:6
    mdl_BW_type1{window} = fitlme(allType1Data{window},'BumpWidth~HeadingOffsetVariability+TotalMovement+(1|Fly)');
    %Model Rsquared
    Rsquared_BW_type1(window) = mdl_BW_type1{window}.Rsquared.Adjusted;
end

figure,
plot(Rsquared_BW_type1,'-o')
title('Bump width');
ylabel('Rsquared');
xlabel('window #');

%show coefficients for max Rsquared model
[m Iw1] = max(Rsquared_BW_type1);
mdl_BW_type1{Iw1}

%% BM for type 2 flies

%Fit mixed linear model using fly number as a random variable
for window = 1:6
    mdl_BM_type2{window} = fitlme(allType2Data{window},'BumpMagnitude~HeadingOffsetVariability+TotalMovement+(1|Fly)');
    %Model Rsquared
    Rsquared_BM_type2(window) = mdl_BM_type2{window}.Rsquared.Adjusted;
end

figure,
plot(Rsquared_BM_type2,'-o')
title('Bump magnitude');
ylabel('Rsquared');
xlabel('window #');
saveas(gcf,'Z:\Wilson Lab\Mel\Experiments\Uncertainty\Exp28\data\groupPlots\modelFit_type1.png')

%show coefficients for max Rsquared model
[m I2] = max(Rsquared_BM_type2);
mdl_BM_type2{I2}

%% Repeat for bump width at half max

%Fit mixed linear model using fly number as a random variable
for window = 1:6
    mdl_BW_type2{window} = fitlme(allType2Data{window},'BumpWidth~HeadingOffsetVariability+TotalMovement+(1|Fly)');
    %Model Rsquared
    Rsquared_BW_type2(window) = mdl_BW_type2{window}.Rsquared.Adjusted;
end

figure,
plot(Rsquared_BW_type2,'-o')
title('Bump width');
ylabel('Rsquared');
xlabel('window #');
saveas(gcf,'Z:\Wilson Lab\Mel\Experiments\Uncertainty\Exp28\data\groupPlots\modelFit_type2.png')

%show coefficients for max Rsquared model
[m Iw2] = max(Rsquared_BW_type2);
mdl_BW_type1{Iw2}


%% Plot bump magnitude and half width as a function of offset variability per fly and on average

figure,

%define bin limits
allHeadingOffsetVariability = [];
allBumpMagnitude = [];
allBumpWidth = [];
for window = 1:6
    for fly = 1:length(type_1_data)
        allHeadingOffsetVariability = [allHeadingOffsetVariability;type_1_data{1,fly}{1,window}.HeadingOffsetVariability];
        allBumpMagnitude = [allBumpMagnitude;type_1_data{1,fly}{1,window}.BumpMagnitude];
        allBumpWidth = [allBumpWidth;type_1_data{1,fly}{1,window}.BumpWidth];    
    end
end
%Define bins
nbins = 10;
max_bin = prctile(allHeadingOffsetVariability,95,'all');
min_bin = prctile(allHeadingOffsetVariability,5,'all');
binWidth = (max_bin-min_bin)/nbins;
Bins = [min_bin:binWidth:max_bin];

%Create axes for plot
mvtAxes = Bins - binWidth;
mvtAxes = mvtAxes(2:end);

for fly = 1:length(type_1_data)
    
    subplot(1,2,1)
    
    %Getting binned means
    allBumpMag = type_1_data{1,fly}{1,I1}.BumpMagnitude;
    heading_offset_variability = type_1_data{1,fly}{1,I1}.HeadingOffsetVariability;
    total_movement = type_1_data{1,fly}{1,I1}.TotalMovement;
    mvt_thresh = 50;
    nbins = 10;
    
    for bin = 1:length(Bins)-1
        meanBin(fly,bin) = nanmean(allBumpMag((heading_offset_variability > Bins(bin)) & (total_movement > mvt_thresh) & (heading_offset_variability < Bins(bin+1))));
    end
    
    plot(mvtAxes,meanBin(fly,:),'color',[.5 .5 .5])
    hold on
    ylabel({'Bump magnitude';'(amplitude of Fourier component)'}); xlabel('Heading offset variability');
    ylim([0 max(max(meanBin))+0.5]);
    xlim([mvtAxes(1) mvtAxes(end)]);
    title('Bump magnitude');
    
    subplot(1,2,2)
    
    allHalfWidth = type_1_data{1,fly}{1,Iw1}.BumpWidth;
    for bin = 1:length(Bins)-1
        meanBinw(fly,bin) = nanmean(allHalfWidth((heading_offset_variability > Bins(bin)) & (total_movement > mvt_thresh) & (heading_offset_variability < Bins(bin+1))));
    end
    
    plot(mvtAxes,meanBinw(fly,:),'color',[.5 .5 .5])
    hold on
    ylabel('Bump half width (EB wedges)'); xlabel('Heading offset variability');
    ylim([0 max(max(meanBinw))+0.5]);
    xlim([mvtAxes(1) mvtAxes(end)]);
    title('Bump half width');
end

plot(mvtAxes,nanmean(meanBinw),'k','linewidth',2)
subplot(1,2,1)
plot(mvtAxes,nanmean(meanBin),'k','linewidth',2)
    
%Save
saveas(gcf,'Z:\Wilson Lab\Mel\Experiments\Uncertainty\Exp28\data\groupPlots\bumpParamVsHeadingVariability.png')

%% Repeat for type 2 flies with bar offset variability

clear meanBin
clear meanBinw
    
figure,

%define bin limits
allBarOffsetVariability = [];
allBumpMagnitude = [];
allBumpWidth = [];
for window = 1:6
    for fly = 1:length(type_2_data)
        allBarOffsetVariability = [allBarOffsetVariability;type_2_data{1,fly}{1,window}.BarOffsetVariability];
        allBumpMagnitude = [allBumpMagnitude;type_2_data{1,fly}{1,window}.BumpMagnitude];
        allBumpWidth = [allBumpWidth;type_2_data{1,fly}{1,window}.BumpWidth];    
    end
end
%Define bins
max_bin = prctile(allBarOffsetVariability,95,'all');
min_bin = prctile(allBarOffsetVariability,5,'all');
binWidth = (max_bin-min_bin)/nbins;
Bins = [min_bin:binWidth:max_bin];

%Create axes for plot
mvtAxes = Bins - binWidth;
mvtAxes = mvtAxes(2:end);

for fly = 1:length(type_2_data)
    
    subplot(1,2,1)
    
    %Getting binned means
    allBumpMag = type_2_data{1,fly}{1,I2}.BumpMagnitude;
    bar_offset_variability = type_2_data{1,fly}{1,I2}.BarOffsetVariability;
    total_movement = type_2_data{1,fly}{1,I2}.TotalMovement;
    mvt_thresh = 50;
    nbins = 10;   
    for bin = 1:length(Bins)-1
        meanBin(fly,bin) = nanmean(allBumpMag((bar_offset_variability > Bins(bin)) & (total_movement > mvt_thresh) & (bar_offset_variability < Bins(bin+1))));
    end
    
    plot(mvtAxes,meanBin(fly,:),'color',[.5 .5 .5])
    hold on
    ylabel({'Bump magnitude';'(amplitude of Fourier component)'}); xlabel('Bar offset variability');
    ylim([0 max(max(meanBin))+0.5]);
    xlim([mvtAxes(1) mvtAxes(end)]);
    title('Bump magnitude');
    
    subplot(1,2,2)
    
    allHalfWidth = type_2_data{1,fly}{1,Iw2}.BumpWidth;
    for bin = 1:length(Bins)-1
        meanBinw(fly,bin) = nanmean(allHalfWidth((bar_offset_variability > Bins(bin)) & (total_movement > mvt_thresh) & (bar_offset_variability < Bins(bin+1))));
    end
    
    plot(mvtAxes,meanBinw(fly,:),'color',[.5 .5 .5])
    hold on
    ylabel('Bump half width (EB wedges)'); xlabel('Bar offset variability');
    ylim([0 max(max(meanBinw))+0.5]);
    xlim([mvtAxes(1) mvtAxes(end)]);
    title('Bump half width');
end

plot(mvtAxes,nanmean(meanBinw),'k','linewidth',2)
subplot(1,2,1)
plot(mvtAxes,nanmean(meanBin),'k','linewidth',2)

%Save
saveas(gcf,'Z:\Wilson Lab\Mel\Experiments\Uncertainty\Exp28\data\groupPlots\bumpParamVsBarVariability.png')

%% Repeat z-scoring the bump mag data for type 1 flies

figure,

%define bin limits
allHeadingOffsetVariability = [];
allBumpMagnitude = [];
allBumpWidth = [];
for window = 1:6
    for fly = 1:length(type_1_data)
        allHeadingOffsetVariability = [allHeadingOffsetVariability;type_1_data{1,fly}{1,window}.HeadingOffsetVariability];
        allBumpMagnitude = [allBumpMagnitude;zscore(type_1_data{1,fly}{1,window}.BumpMagnitude)];
        allBumpWidth = [allBumpWidth;zscore(type_1_data{1,fly}{1,window}.BumpWidth)];    
    end
end
%Define bins
max_bin = prctile(allHeadingOffsetVariability,95,'all');
min_bin = prctile(allHeadingOffsetVariability,5,'all');
binWidth = (max_bin-min_bin)/nbins;
Bins = [min_bin:binWidth:max_bin];

%Create axes for plot
mvtAxes = Bins - binWidth;
mvtAxes = mvtAxes(2:end);

for fly = 1:length(type_1_data)
    
    subplot(1,2,1)
    
    %Getting binned means
    allBumpMag = zscore(type_1_data{1,fly}{1,I1}.BumpMagnitude);
    heading_offset_variability = type_1_data{1,fly}{1,I1}.HeadingOffsetVariability;
    total_movement = type_1_data{1,fly}{1,I1}.TotalMovement;
    mvt_thresh = 50;
    nbins = 10;
    
    for bin = 1:length(Bins)-1
        meanBin(fly,bin) = nanmean(allBumpMag((heading_offset_variability > Bins(bin)) & (total_movement > mvt_thresh) & (heading_offset_variability < Bins(bin+1))));
    end
    
    plot(mvtAxes,meanBin(fly,:),'color',[.5 .5 .5])
    hold on
    ylabel({'Bump magnitude';'(amplitude of Fourier component)'}); xlabel('Heading offset variability');
    ylim([min(min(meanBin))-0.5 max(max(meanBin))+0.5]);
    xlim([mvtAxes(1) mvtAxes(end)]);
    title('Zscored bump magnitude');
    
    subplot(1,2,2)
    
    allHalfWidth = zscore(type_1_data{1,fly}{1,Iw1}.BumpWidth);
    for bin = 1:length(Bins)-1
        meanBinw(fly,bin) = nanmean(allHalfWidth((heading_offset_variability > Bins(bin)) & (total_movement > mvt_thresh) & (heading_offset_variability < Bins(bin+1))));
    end
    
    plot(mvtAxes,meanBinw(fly,:),'color',[.5 .5 .5])
    hold on
    ylabel('Bump half width (EB wedges)'); xlabel('Heading offset variability');
    ylim([min(min(meanBinw))-0.5 max(max(meanBinw))+0.5]);
    xlim([mvtAxes(1) mvtAxes(end)]);
    title('Zscored bump half width');
end

plot(mvtAxes,nanmean(meanBinw),'k','linewidth',2)
subplot(1,2,1)
plot(mvtAxes,nanmean(meanBin),'k','linewidth',2)

saveas(gcf,'Z:\Wilson Lab\Mel\Experiments\Uncertainty\Exp28\data\groupPlots\zBumpParamVsHeadingVariability.png')


%% Repeat for type 2 flies

clear meanBin
clear meanBinw

figure,

%define bin limits
allBarOffsetVariability = [];
allBumpMagnitude = [];
allBumpWidth = [];
for window = 1:6
    for fly = 1:length(type_2_data)
        allBarOffsetVariability = [allBarOffsetVariability;type_2_data{1,fly}{1,window}.BarOffsetVariability];
        allBumpMagnitude = [allBumpMagnitude;zscore(type_2_data{1,fly}{1,window}.BumpMagnitude)];
        allBumpWidth = [allBumpWidth;zscore(type_2_data{1,fly}{1,window}.BumpWidth)];    
    end
end
%Define bins
max_bin = prctile(allBarOffsetVariability,95,'all');
min_bin = prctile(allBarOffsetVariability,5,'all');
binWidth = (max_bin-min_bin)/nbins;
Bins = [min_bin:binWidth:max_bin];

%Create axes for plot
mvtAxes = Bins - binWidth;
mvtAxes = mvtAxes(2:end);

for fly = 1:length(type_2_data)
    
    subplot(1,2,1)
    
    %Getting binned means
    allBumpMag = zscore(type_2_data{1,fly}{1,I2}.BumpMagnitude);
    bar_offset_variability = type_2_data{1,fly}{1,I2}.BarOffsetVariability;
    total_movement = type_2_data{1,fly}{1,I2}.TotalMovement;
    mvt_thresh = 50;
    nbins = 10;
    
    for bin = 1:length(Bins)-1
        meanBin(fly,bin) = nanmean(allBumpMag((bar_offset_variability > Bins(bin)) & (total_movement > mvt_thresh) & (bar_offset_variability < Bins(bin+1))));
    end
    
    plot(mvtAxes,meanBin(fly,:),'color',[.5 .5 .5])
    hold on
    ylabel({'Bump magnitude';'(amplitude of Fourier component)'}); xlabel('Bar offset variability');
    ylim([min(min(meanBin))-0.5 max(max(meanBin))+0.5]);
    xlim([mvtAxes(1) mvtAxes(end)]);
    title('Bump magnitude');
    
    subplot(1,2,2)
    
    allHalfWidth = zscore(type_2_data{1,fly}{1,Iw2}.BumpWidth);
    for bin = 1:length(Bins)-1
        meanBinw(fly,bin) = nanmean(allHalfWidth((bar_offset_variability > Bins(bin)) & (total_movement > mvt_thresh) & (bar_offset_variability < Bins(bin+1))));
    end
    
    plot(mvtAxes,meanBinw(fly,:),'color',[.5 .5 .5])
    hold on
    ylabel('Bump half width (EB wedges)'); xlabel('Bar offset variability');
    ylim([min(min(meanBin))-0.5 max(max(meanBinw))+0.5]);
    xlim([mvtAxes(1) mvtAxes(end)]);
    title('Bump half width');
end

plot(mvtAxes,nanmean(meanBinw),'k','linewidth',2)
subplot(1,2,1)
plot(mvtAxes,nanmean(meanBin),'k','linewidth',2)

%save
saveas(gcf,'Z:\Wilson Lab\Mel\Experiments\Uncertainty\Exp28\data\groupPlots\zBumpParamVsBarVariability.png')

%% Get relationship between bump parameters and offset during normal gain bouts

for fly = 1:length(data)
       NG_data{fly} = data(fly).modelTableNG;
end

%Remove empty cells
NG_data = NG_data(~cellfun('isempty',NG_data));

%Combine the tables into one
for window = 1:6
    flyNumber = [];
    allNGData{window} = array2table(zeros(0,5),'VariableNames', {'HeadingOffsetVariability','TotalMovement','BumpMagnitude','BumpWidth','HeadingVariability'});
    for fly = 1:length(NG_data)
        flyNumber = [flyNumber,repelem(fly,length(NG_data{1,fly}{1,window}.BumpMagnitude))];
        allNGData{window} = [allNGData{window};NG_data{1,fly}{1,window}];
    end
    allNGData{window} = addvars(allNGData{window},flyNumber');
    allNGData{window}.Properties.VariableNames{'Var6'} = 'Fly';
end

%% Compute model for bump magnitude for the normal gain period

%Fit mixed linear model using fly number as a random variable
for window = 1:6
    mdl_BM{window} = fitlme(allNGData{window},'BumpMagnitude~HeadingOffsetVariability+TotalMovement+(1|Fly)');
    %Model Rsquared
    Rsquared_BM(window) = mdl_BM{window}.Rsquared.Adjusted;
end

figure,
plot(Rsquared_BM,'-o')
title('Bump magnitude');
ylabel('Rsquared');
xlabel('window #');

%show coefficients for max Rsquared model
[m I] = max(Rsquared_BM);
mdl_BM{I}

%% Repeat for bump width at half max

%Fit mixed linear model using fly number as a random variable
for window = 1:6
    mdl_BW{window} = fitlme(allNGData{window},'BumpWidth~HeadingOffsetVariability+TotalMovement+(1|Fly)');
    %Model Rsquared
    Rsquared_BW(window) = mdl_BW{window}.Rsquared.Adjusted;
end

figure,
plot(Rsquared_BW,'-o')
title('Bump width');
ylabel('Rsquared');
xlabel('window #');

%show coefficients for max Rsquared model
[m Iw] = max(Rsquared_BW);
mdl_BW_type1{Iw}

%% Plot bump magnitude and half width as a function of offset variability per fly and on average

figure,

%define bin limits
allHeadingOffsetVariability = [];
allBumpMagnitude = [];
allBumpWidth = [];
for window = 1:6
    for fly = 1:length(NG_data)
        allHeadingOffsetVariability = [allHeadingOffsetVariability;NG_data{1,fly}{1,window}.HeadingOffsetVariability];
        allBumpMagnitude = [allBumpMagnitude;NG_data{1,fly}{1,window}.BumpMagnitude];
        allBumpWidth = [allBumpWidth;NG_data{1,fly}{1,window}.BumpWidth];    
    end
end
%Define bins
nbins = 10;
max_bin = prctile(allHeadingOffsetVariability,95,'all');
min_bin = prctile(allHeadingOffsetVariability,5,'all');
binWidth = (max_bin-min_bin)/nbins;
Bins = [min_bin:binWidth:max_bin];

%Create axes for plot
mvtAxes = Bins - binWidth;
mvtAxes = mvtAxes(2:end);

for fly = 1:length(NG_data)
    
    subplot(1,2,1)
    
    %Getting binned means
    allBumpMag = NG_data{1,fly}{1,I}.BumpMagnitude;
    heading_offset_variability = NG_data{1,fly}{1,I}.HeadingOffsetVariability;
    total_movement = NG_data{1,fly}{1,I}.TotalMovement;
    mvt_thresh = 50;
    nbins = 10;
    
    for bin = 1:length(Bins)-1
        meanBin(fly,bin) = nanmean(allBumpMag((heading_offset_variability > Bins(bin)) & (total_movement > mvt_thresh) & (heading_offset_variability < Bins(bin+1))));
    end
    
    plot(mvtAxes,meanBin(fly,:),'color',[.5 .5 .5])
    hold on
    ylabel({'Bump magnitude';'(amplitude of Fourier component)'}); xlabel('Heading offset variability');
    ylim([0 max(max(meanBin))+0.5]);
    xlim([mvtAxes(1)+binWidth mvtAxes(end)]);
    title('Bump magnitude');
    
    subplot(1,2,2)
    
    allHalfWidth = NG_data{1,fly}{1,Iw}.BumpWidth;
    for bin = 1:length(Bins)-1
        meanBinw(fly,bin) = nanmean(allHalfWidth((heading_offset_variability > Bins(bin)) & (total_movement > mvt_thresh) & (heading_offset_variability < Bins(bin+1))));
    end
    
    plot(mvtAxes,meanBinw(fly,:),'color',[.5 .5 .5])
    hold on
    ylabel('Bump half width (EB wedges)'); xlabel('Heading offset variability');
    ylim([0 max(max(meanBinw))+0.5]);
    xlim([mvtAxes(1)+binWidth mvtAxes(end)]);
    title('Bump half width');
end

plot(mvtAxes,nanmean(meanBinw),'k','linewidth',2)
subplot(1,2,1)
plot(mvtAxes,nanmean(meanBin),'k','linewidth',2)
    
%Save
saveas(gcf,'Z:\Wilson Lab\Mel\Experiments\Uncertainty\Exp28\data\groupPlots\bumpParamVsHeadingVariabilityNG.png')

%% Repeat zscoring data

figure,

%define bin limits
allHeadingOffsetVariability = [];
allBumpMagnitude = [];
allBumpWidth = [];
for window = 1:6
    for fly = 1:length(NG_data)
        allHeadingOffsetVariability = [allHeadingOffsetVariability;NG_data{1,fly}{1,window}.HeadingOffsetVariability];
        allBumpMagnitude = [allBumpMagnitude;zscore(NG_data{1,fly}{1,window}.BumpMagnitude)];
        allBumpWidth = [allBumpWidth;zscore(NG_data{1,fly}{1,window}.BumpWidth)];    
    end
end
%Define bins
max_bin = prctile(allHeadingOffsetVariability,95,'all');
min_bin = prctile(allHeadingOffsetVariability,5,'all');
binWidth = (max_bin-min_bin)/nbins;
Bins = [min_bin:binWidth:max_bin];

%Create axes for plot
mvtAxes = Bins - binWidth;
mvtAxes = mvtAxes(2:end);

for fly = 1:length(NG_data)
    
    subplot(1,2,1)
    
    %Getting binned means
    allBumpMag = zscore(NG_data{1,fly}{1,I}.BumpMagnitude);
    heading_offset_variability = NG_data{1,fly}{1,I}.HeadingOffsetVariability;
    total_movement = NG_data{1,fly}{1,I}.TotalMovement;
    mvt_thresh = 50;
    nbins = 10;
    
    for bin = 1:length(Bins)-1
        meanBin(fly,bin) = nanmean(allBumpMag((heading_offset_variability > Bins(bin)) & (total_movement > mvt_thresh) & (heading_offset_variability < Bins(bin+1))));
    end
    
    plot(mvtAxes,meanBin(fly,:),'color',[.5 .5 .5])
    hold on
    ylabel({'Bump magnitude';'(amplitude of Fourier component)'}); xlabel('Heading offset variability');
    ylim([min(min(meanBin))-0.5 max(max(meanBin))+0.5]);
    xlim([mvtAxes(1)+binWidth mvtAxes(end)]);
    title('Zscored bump magnitude');
    
    subplot(1,2,2)
    
    allHalfWidth = zscore(NG_data{1,fly}{1,Iw}.BumpWidth);
    for bin = 1:length(Bins)-1
        meanBinw(fly,bin) = nanmean(allHalfWidth((heading_offset_variability > Bins(bin)) & (total_movement > mvt_thresh) & (heading_offset_variability < Bins(bin+1))));
    end
    
    plot(mvtAxes,meanBinw(fly,:),'color',[.5 .5 .5])
    hold on
    ylabel('Bump half width (EB wedges)'); xlabel('Heading offset variability');
    ylim([min(min(meanBinw))-0.5 max(max(meanBinw))+0.5]);
    xlim([mvtAxes(1)+binWidth mvtAxes(end)]);
    title('Zscored bump half width');
end

plot(mvtAxes,nanmean(meanBinw),'k','linewidth',2)
subplot(1,2,1)
plot(mvtAxes,nanmean(meanBin),'k','linewidth',2)

saveas(gcf,'Z:\Wilson Lab\Mel\Experiments\Uncertainty\Exp28\data\groupPlots\zBumpParamVsHeadingVariabilityNG.png')

%% Cluster data to see if it can be naturally divided into type I and type II flies

%I will use for each fly the following criteria:
%offset_var
%heading_var
%total_mvt
%mean bump mag
%mean bump width at half max

%create array
for fly = 1:length(data)
    type_of_fly(fly) = data(fly).type_of_fly;
    clusterDataHeading{fly,1} = mean(data(fly).modelTableNG{1,I}.HeadingVariability(1:1836));
    clusterDataOffset{fly,1} = mean(data(fly).modelTableNG{1,I}.HeadingOffsetVariability(1:1836));
    clusterDataMvt{fly,1} = mean(data(fly).modelTableNG{1,I}.TotalMovement(1:1836));
    clusterDataBM{fly,1} = mean(data(fly).modelTableNG{1,I}.BumpMagnitude(1:1836));
    clusterDataBW{fly,1} = mean(data(fly).modelTableNG{1,I}.BumpWidth(1:1836));
    clusterDataAll{fly,1} = [mean(data(fly).modelTableNG{1,I}.HeadingOffsetVariability(1:1836)),mean(data(fly).modelTableNG{1,I}.HeadingVariability(1:1836)),mean(data(fly).modelTableNG{1,I}.TotalMovement(1:1836)),mean(data(fly).modelTableNG{1,I}.BumpMagnitude(1:1836)),mean(data(fly).modelTableNG{1,I}.BumpWidth(1:1836))];
    clusterDataMvtVars{fly,1} = [mean(data(fly).modelTableNG{1,I}.HeadingVariability(1:1836)),mean(data(fly).modelTableNG{1,I}.TotalMovement(1:1836))];
    clusterDataBumpPar{fly,1} = [mean(data(fly).modelTableNG{1,I}.BumpMagnitude(1:1836)),mean(data(fly).modelTableNG{1,I}.BumpWidth(1:1836))];    
end

clusterdataHeading = cell2mat(clusterDataHeading);
%run kmeans clustering with the data, defining two clusters
idx = kmeans(clusterdataHeading,2);
opposite_idx(idx==1) = 2;
opposite_idx(idx==2) = 1;
%compare the result from the kmeans with the type of fly
differences1 = type_of_fly - idx';
differences2 = type_of_fly - opposite_idx;
%percentage correct
percent_correct1 = (length(idx)-sum(abs(differences1)))*100/length(idx);
percent_correct2 = (length(idx)-sum(abs(differences2)))*100/length(idx);
percent_correct = max(percent_correct1,percent_correct2)


clusterdataOffset = cell2mat(clusterDataOffset);
idx = kmeans(clusterdataOffset,2)
opposite_idx(idx==1) = 2;
opposite_idx(idx==2) = 1;
%compare the result from the kmeans with the type of fly
differences1 = type_of_fly - idx';
differences2 = type_of_fly - opposite_idx;
%percentage correct
percent_correct1 = (length(idx)-sum(abs(differences1)))*100/length(idx);
percent_correct2 = (length(idx)-sum(abs(differences2)))*100/length(idx);
percent_correct = max(percent_correct1,percent_correct2)


clusterdataMvt = cell2mat(clusterDataMvt);
idx = kmeans(clusterdataMvt,2);
opposite_idx(idx==1) = 2;
opposite_idx(idx==2) = 1;
%compare the result from the kmeans with the type of fly
differences1 = type_of_fly - idx';
differences2 = type_of_fly - opposite_idx;
%percentage correct
percent_correct1 = (length(idx)-sum(abs(differences1)))*100/length(idx);
percent_correct2 = (length(idx)-sum(abs(differences2)))*100/length(idx);
percent_correct = max(percent_correct1,percent_correct2)


clusterdataBM = cell2mat(clusterDataBM);
idx = kmeans(clusterdataBM,2);
opposite_idx(idx==1) = 2;
opposite_idx(idx==2) = 1;
%compare the result from the kmeans with the type of fly
differences1 = type_of_fly - idx';
differences2 = type_of_fly - opposite_idx;
%percentage correct
percent_correct1 = (length(idx)-sum(abs(differences1)))*100/length(idx);
percent_correct2 = (length(idx)-sum(abs(differences2)))*100/length(idx);
percent_correct = max(percent_correct1,percent_correct2)


clusterdataBW = cell2mat(clusterDataBW);
idx = kmeans(clusterdataBW,2);
opposite_idx(idx==1) = 2;
opposite_idx(idx==2) = 1;
%compare the result from the kmeans with the type of fly
differences1 = type_of_fly - idx';
differences2 = type_of_fly - opposite_idx;
%percentage correct
percent_correct1 = (length(idx)-sum(abs(differences1)))*100/length(idx);
percent_correct2 = (length(idx)-sum(abs(differences2)))*100/length(idx);
percent_correct = max(percent_correct1,percent_correct2)


clusterdataAll = cell2mat(clusterDataAll);
idx = kmeans(clusterdataAll,2);
opposite_idx(idx==1) = 2;
opposite_idx(idx==2) = 1;
%compare the result from the kmeans with the type of fly
differences1 = type_of_fly - idx';
differences2 = type_of_fly - opposite_idx;
%percentage correct
percent_correct1 = (length(idx)-sum(abs(differences1)))*100/length(idx);
percent_correct2 = (length(idx)-sum(abs(differences2)))*100/length(idx);
percent_correct = max(percent_correct1,percent_correct2)


clusterdataMvtVars = cell2mat(clusterDataMvtVars);
idx = kmeans(clusterdataMvtVars,2);
opposite_idx(idx==1) = 2;
opposite_idx(idx==2) = 1;
%compare the result from the kmeans with the type of fly
differences1 = type_of_fly - idx';
differences2 = type_of_fly - opposite_idx;
%percentage correct
percent_correct1 = (length(idx)-sum(abs(differences1)))*100/length(idx);
percent_correct2 = (length(idx)-sum(abs(differences2)))*100/length(idx);
percent_correct = max(percent_correct1,percent_correct2)


clusterdataBumpPar = cell2mat(clusterDataBumpPar);
idx = kmeans(clusterdataBumpPar,2);
opposite_idx(idx==1) = 2;
opposite_idx(idx==2) = 1;
%compare the result from the kmeans with the type of fly
differences1 = type_of_fly - idx';
differences2 = type_of_fly - opposite_idx;
%percentage correct
percent_correct1 = (length(idx)-sum(abs(differences1)))*100/length(idx);
percent_correct2 = (length(idx)-sum(abs(differences2)))*100/length(idx);
percent_correct = max(percent_correct1,percent_correct2)


%%  Look at mean bump parameters in type I flies and type II flies in the first bout

figure,
subplot(1,2,1)
boxplot(clusterdataBM,type_of_fly,'color','k')
hold on
scatter(type_of_fly,clusterdataBM,[],[.5 .5 .5],'filled')
ylabel('Bump magnitude');
set(findobj(gca,'type','line'),'linew',2)
xlabel('Type of fly');
ylim([0 1.8]);

subplot(1,2,2)
boxplot(clusterdataBW,type_of_fly,'color','k')
hold on
scatter(type_of_fly,clusterdataBW,[],[.5 .5 .5],'filled')
ylabel('Bump width');
set(findobj(gca,'type','line'),'linew',2)
xlabel('Type of fly');
ylim([0 4]);

%save
saveas(gcf,'Z:\Wilson Lab\Mel\Experiments\Uncertainty\Exp28\data\groupPlots\bumpParAsPredictors.png')

%% Divide the inverted gain portion into quartiles and look at bump parameter evolution

quartile_width = floor(length(data(1).modelTable{1,1}.BumpMagnitude)/4);
quartile_changes = [1:quartile_width:length(data(1).modelTable{1,1}.BumpMagnitude)];
warning('off','all')

for quartile = 1:4
    for fly = 1:14
        BM(fly,:) = data(fly).modelTable{1,1}.BumpMagnitude(quartile_changes(quartile):quartile_changes(quartile+1));
        mvt_q = data(fly).modelTable{1,1}.TotalMovement(quartile_changes(quartile):quartile_changes(quartile+1));
        BMq(fly,quartile) = nanmean(BM(fly,mvt_q > mvt_thresh));
        
        BW(fly,:) = data(fly).modelTable{1,1}.BumpWidth(quartile_changes(quartile):quartile_changes(quartile+1));
        BWq(fly,quartile) = nanmean(BW(fly,mvt_q > mvt_thresh));
    end
end

%% Plot parameter evolution for type 1 flies

figure,
subplot(1,2,1)
plot(BMq(type_of_fly'==1,:)','-o','color',[.5 .5 .5])
hold on
plot(mean(BMq(type_of_fly'==1,:)),'-ko','lineWidth',2)
set(gca,'yticklabel',{[]});
xticks([1:4])
xlabel('Quartile');
title('Bump Magnitude');
xlim([0 5]);
ylim([0 1.5]);

subplot(1,2,2)
plot(BWq(type_of_fly'==1,:)','-o','color',[.5 .5 .5])
hold on
plot(mean(BWq(type_of_fly'==1,:)),'-ko','lineWidth',2)
set(gca,'yticklabel',{[]});
xticks([1:4])
xlabel('Quartile');
title('Bump Width');
xlim([0 5]);
ylim([0 3.5]);

            

%% Plot parameter evolution for type 2 flies

figure,
subplot(1,2,1)
plot(BMq(type_of_fly'==2,:)','-o','color',[.5 .5 .5])
hold on
plot(mean(BMq(type_of_fly'==2,:)),'-ko','lineWidth',2)
set(gca,'yticklabel',{[]});
xticks([1:4])
xlabel('Quartile');
title('Bump Magnitude');
xlim([0 5]);
ylim([0 1.5]);

subplot(1,2,2)
plot(BWq(type_of_fly'==2,:)','-o','color',[.5 .5 .5])
hold on
plot(mean(BWq(type_of_fly'==2,:)),'-ko','lineWidth',2)
set(gca,'yticklabel',{[]});
xticks([1:4])
xlabel('Quartile');
title('Bump Width');
xlim([0 5]);
ylim([0 3.5]);

%% zscoring the data

for quartile = 1:4
    for fly = 1:14
        BMz(fly,:) = zscoredata(fly).modelTable{1,1}.BumpMagnitude(quartile_changes(quartile):quartile_changes(quartile+1));
        mvt_q = data(fly).modelTable{1,1}.TotalMovement(quartile_changes(quartile):quartile_changes(quartile+1));
        BMqz(fly,quartile) = nanmean(BM(fly,mvt_q > mvt_thresh));
        
        BWz(fly,:) = data(fly).modelTable{1,1}.BumpWidth(quartile_changes(quartile):quartile_changes(quartile+1));
        BWqz(fly,quartile) = nanmean(BW(fly,mvt_q > mvt_thresh));
    end
end